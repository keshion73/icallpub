{"remainingRequest":"C:\\workspace\\icallpub\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\workspace\\icallpub\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\workspace\\icallpub\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\workspace\\icallpub\\src\\components\\Widgets\\SettingsDrawer.vue?vue&type=template&id=2e7222a4&","dependencies":[{"path":"C:\\workspace\\icallpub\\src\\components\\Widgets\\SettingsDrawer.vue","mtime":1647516214000},{"path":"C:\\workspace\\icallpub\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\icallpub\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\workspace\\icallpub\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\icallpub\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}