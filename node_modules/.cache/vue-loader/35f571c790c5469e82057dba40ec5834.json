{"remainingRequest":"C:\\workspace\\icallpub\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\workspace\\icallpub\\src\\views\\Dashboard\\VrInfo.vue?vue&type=template&id=049c433f&","dependencies":[{"path":"C:\\workspace\\icallpub\\src\\views\\Dashboard\\VrInfo.vue","mtime":1646669412000},{"path":"C:\\workspace\\icallpub\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\icallpub\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\workspace\\icallpub\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\workspace\\icallpub\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}